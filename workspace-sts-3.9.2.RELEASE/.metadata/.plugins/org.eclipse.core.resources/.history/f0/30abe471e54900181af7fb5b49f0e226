package com.song.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.management.Query;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.query.BasicQuery;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.jayway.jsonpath.Criteria;
import com.register.Register;
import com.song.configue.MongoDBConfigure;
import com.song.repository.Registerrepository;
import com.song.security.JwtGenerator;
import com.wedding.model.User;


@RestController
@RequestMapping("/userlog/token")
public class RegisterController {

	
	
   
	private JwtGenerator jwtGenerator;
//	private UserRepository userRepository;
	private Registerrepository registerrepository;
	
	public RegisterController(JwtGenerator jwtGenerator,Registerrepository registerrepository) {
		this.registerrepository = registerrepository;
		this.jwtGenerator = jwtGenerator;
	}
	
// to save data of user registration
	@RequestMapping(value = "/Userdata", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Void> create(@Valid @RequestBody Register register , BindingResult bindingResult) 
	{
		if (bindingResult.hasErrors()) {
			System.out.println("somethis is wrong");
			bindingResult
			.getFieldErrors()
			.stream()
			.forEach(f -> System.out.println(f.getField() + ": " + f.getDefaultMessage()));
		}else {
			registerrepository.save(register);
			return ResponseEntity.noContent().build();
		}
		return ResponseEntity.accepted().build();
	}
	
	@PostMapping
	public ResponseEntity<Map<String, String>> generate(@RequestBody User user) {
		Map<String, String> response = new HashMap<String, String>();
		String email = String.valueOf(user.getEmailId());
		if (registerrepository.findOneByEmailId(email) == null) {
			response.put("error", "Please enter valid emailId");
			return ResponseEntity.badRequest().body(response);
		}
		Register authenticateUser = registerrepository.findOneByEmailId(email);

		if (!authenticateUser.getPassword().contentEquals(user.getPassword())) {
			response.put("error", "Please enter valid password");
			return ResponseEntity.badRequest().body(response);
		}
		if (authenticateUser != null && (authenticateUser.getPassword().contentEquals(user.getPassword()))) {
			user.setRole(authenticateUser.getRole());
			String token = jwtGenerator.generate(user);
			response.put("token", token);
			return ResponseEntity.ok().body(response);
		} else {
			return ResponseEntity.badRequest().build();
		}
	}
	

}
